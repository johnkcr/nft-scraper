{"version":3,"file":"nft-scraper.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/moralis/api.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const MORALIS_APPLICATION_ID = process.env[\"MORALIS_APPLICATION_ID\"] || \"jlvmvCLbkVYZdgOMeKvYCuK8awZLCQARSLRsVb5o\";\nexport const MORALIS_API_KEY = process.env['MORALIS_API_KEY'] || 'V7ocf3uOf3lsa2i3uggAGTrDMjRUogCuzUA2AglySdA9qkO4mYAHxcPbh6NTCD59';","// tslint:disable\n/**\n * Moralis API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 2\n *\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\n import * as url from 'url';\n import * as isomorphicFetch from 'isomorphic-fetch';\n import { Configuration } from './configuration';\n \n const BASE_PATH = 'https://deep-index.moralis.io/api/v2'.replace(/\\/+$/, '');\n \n /**\n  *\n  * @export\n  */\n export const COLLECTION_FORMATS = {\n   csv: ',',\n   ssv: ' ',\n   tsv: '\\t',\n   pipes: '|',\n };\n \n /**\n  *\n  * @export\n  * @interface FetchAPI\n  */\n export interface FetchAPI {\n   (url: string, init?: any): Promise<Response>;\n }\n \n /**\n  *\n  * @export\n  * @interface FetchArgs\n  */\n export interface FetchArgs {\n   url: string;\n   options: any;\n }\n \n /**\n  *\n  * @export\n  * @class BaseAPI\n  */\n export class BaseAPI {\n   protected configuration: Configuration;\n \n   constructor(\n     configuration?: Configuration,\n     protected basePath: string = BASE_PATH,\n     protected fetch: FetchAPI = isomorphicFetch,\n   ) {\n     if (configuration) {\n       this.configuration = configuration;\n       this.basePath = configuration.basePath || this.basePath;\n     }\n   }\n }\n \n /**\n  *\n  * @export\n  * @class RequiredError\n  * @extends {Error}\n  */\n export class RequiredError extends Error {\n   name: 'RequiredError';\n   constructor(public field: string, msg?: string) {\n     super(msg);\n   }\n }\n \n /**\n  *\n  * @export\n  * @interface Block\n  */\n export interface Block {\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Block\n    */\n   timestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Block\n    */\n   number: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Block\n    */\n   hash: string;\n   /**\n    * The block hash of the parent block\n    * @type {string}\n    * @memberof Block\n    */\n   parentHash: string;\n   /**\n    * The nonce\n    * @type {string}\n    * @memberof Block\n    */\n   nonce: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   sha3Uncles: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   logsBloom: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   transactionsRoot: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   stateRoot: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   receiptsRoot: string;\n   /**\n    * The address of the miner\n    * @type {string}\n    * @memberof Block\n    */\n   miner: string;\n   /**\n    * The difficulty of the block\n    * @type {string}\n    * @memberof Block\n    */\n   difficulty: string;\n   /**\n    * The total difficulty\n    * @type {string}\n    * @memberof Block\n    */\n   totalDifficulty: string;\n   /**\n    * The block size\n    * @type {string}\n    * @memberof Block\n    */\n   size: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   extraData: string;\n   /**\n    * The gas limit\n    * @type {string}\n    * @memberof Block\n    */\n   gasLimit: string;\n   /**\n    * The gas used\n    * @type {string}\n    * @memberof Block\n    */\n   gasUsed: string;\n   /**\n    * The number of transactions in the block\n    * @type {string}\n    * @memberof Block\n    */\n   transactionCount: string;\n   /**\n    * The transactions in the block\n    * @type {Array<BlockTransaction>}\n    * @memberof Block\n    */\n   transactions: Array<BlockTransaction>;\n }\n /**\n  *\n  * @export\n  * @interface BlockTransaction\n  */\n export interface BlockTransaction {\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   hash: string;\n   /**\n    * The nonce\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   nonce: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   transactionIndex: string;\n   /**\n    * The from address\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   fromAddress: string;\n   /**\n    * The to address\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   toAddress: string;\n   /**\n    * The value sent\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   value: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   gas?: string;\n   /**\n    * The gas price\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   gasPrice: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   input: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptCumulativeGasUsed: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptGasUsed: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptContractAddress?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptRoot?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptStatus: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockNumber: string;\n   /**\n    * The hash of the block\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockHash: string;\n   /**\n    * The logs of the transaction\n    * @type {Array<Log>}\n    * @memberof BlockTransaction\n    */\n   logs: Array<Log>;\n }\n /**\n  *\n  * @export\n  * @enum {string}\n  */\n export enum ChainList {\n   Eth = <any>'eth',\n   _0x1 = <any>'0x1',\n   Ropsten = <any>'ropsten',\n   _0x3 = <any>'0x3',\n   Rinkeby = <any>'rinkeby',\n   _0x4 = <any>'0x4',\n   Goerli = <any>'goerli',\n   _0x5 = <any>'0x5',\n   Kovan = <any>'kovan',\n   _0x2a = <any>'0x2a',\n   Polygon = <any>'polygon',\n   _0x89 = <any>'0x89',\n   Mumbai = <any>'mumbai',\n   _0x13881 = <any>'0x13881',\n   Bsc = <any>'bsc',\n   _0x38 = <any>'0x38',\n   BscTestnet = <any>'bsc testnet',\n   _0x61 = <any>'0x61',\n }\n /**\n  *\n  * @export\n  * @interface Erc20Allowance\n  */\n export interface Erc20Allowance {\n   /**\n    * The allowance\n    * @type {string}\n    * @memberof Erc20Allowance\n    */\n   allowance: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Metadata\n  */\n export interface Erc20Metadata {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   address: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   symbol: string;\n   /**\n    * The number of decimals on of the token\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   decimals: string;\n   /**\n    * The logo of the token\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   logo?: string;\n   /**\n    * The logo hash\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   logoHash?: string;\n   /**\n    * The thumbnail of the logo\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   thumbnail?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   blockNumber?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   validated?: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Price\n  */\n export interface Erc20Price {\n   /**\n    *\n    * @type {NativeErc20Price}\n    * @memberof Erc20Price\n    */\n   nativePrice?: NativeErc20Price;\n   /**\n    * The price in USD for the token\n    * @type {number}\n    * @memberof Erc20Price\n    */\n   usdPrice: number;\n   /**\n    * The address of the exchange used to calculate the price\n    * @type {string}\n    * @memberof Erc20Price\n    */\n   exchangeAddress?: string;\n   /**\n    * The name of the exchange used for calculating the price\n    * @type {string}\n    * @memberof Erc20Price\n    */\n   exchangeName?: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20TokenBalance\n  */\n export interface Erc20TokenBalance {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   tokenAddress: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   symbol: string;\n   /**\n    * The logo of the token\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   logo?: string;\n   /**\n    * The thumbnail of the logo\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   thumbnail?: string;\n   /**\n    * The number of decimals on of the token\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   decimals: string;\n   /**\n    * Timestamp of when the contract was last synced with the node\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   balance: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Transaction\n  */\n export interface Erc20Transaction {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   transactionHash: string;\n   /**\n    * The address of the token\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockHash: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   toAddress: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   fromAddress: string;\n   /**\n    * The value that was transfered (in wei)\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   value: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc721Metadata\n  */\n export interface Erc721Metadata {\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   symbol: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   tokenUri?: string;\n }\n /**\n  *\n  * @export\n  * @interface HistoricalNftTransfer\n  */\n export interface HistoricalNftTransfer {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   transactionHash: string;\n   /**\n    * The address of the token\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockHash: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   toAddress: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   fromAddress: string;\n   /**\n    * The token ids of the tokens that were transfered\n    * @type {Array<string>}\n    * @memberof HistoricalNftTransfer\n    */\n   tokenIds: Array<string>;\n   /**\n    * The amounts that were transfered\n    * @type {Array<string>}\n    * @memberof HistoricalNftTransfer\n    */\n   amounts: Array<string>;\n   /**\n    * They contract type of the transfer\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   contractType: string;\n }\n /**\n  *\n  * @export\n  * @interface Log\n  */\n export interface Log {\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   logIndex: string;\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof Log\n    */\n   transactionHash: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   transactionIndex: string;\n   /**\n    * The address of the contract\n    * @type {string}\n    * @memberof Log\n    */\n   address: string;\n   /**\n    * The data of the log\n    * @type {string}\n    * @memberof Log\n    */\n   data: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic0: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic1?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic2?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic3?: string;\n   /**\n    * The timestamp of the block\n    * @type {string}\n    * @memberof Log\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Log\n    */\n   blockNumber: string;\n   /**\n    * The hash of the block\n    * @type {string}\n    * @memberof Log\n    */\n   blockHash: string;\n }\n /**\n  *\n  * @export\n  * @interface LogEvent\n  */\n export interface LogEvent {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof LogEvent\n    */\n   transactionHash: string;\n   /**\n    * The address of the contract\n    * @type {string}\n    * @memberof LogEvent\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockHash: string;\n   /**\n    * The content of the event\n    * @type {any}\n    * @memberof LogEvent\n    */\n   data: any;\n }\n /**\n  *\n  * @export\n  * @interface NativeBalance\n  */\n export interface NativeBalance {\n   /**\n    * The balance\n    * @type {string}\n    * @memberof NativeBalance\n    */\n   balance: string;\n }\n /**\n  *\n  * @export\n  * @interface NativeErc20Price\n  */\n export interface NativeErc20Price {\n   /**\n    * The native price of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   value: string;\n   /**\n    * The number of decimals of the token\n    * @type {number}\n    * @memberof NativeErc20Price\n    */\n   decimals: number;\n   /**\n    * The Name of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   name: string;\n   /**\n    * The Symbol of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface Nft\n  */\n export interface Nft {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenId: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof Nft\n    */\n   contractType: string;\n   /**\n    * The uri to the metadata of the token\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenUri?: string;\n   /**\n    * The metadata of the token\n    * @type {string}\n    * @memberof Nft\n    */\n   metadata?: string;\n   /**\n    * when the metadata was last updated\n    * @type {string}\n    * @memberof Nft\n    */\n   syncedAt?: string;\n   /**\n    * The number of this item the user owns (used by ERC1155)\n    * @type {string}\n    * @memberof Nft\n    */\n   amount?: string;\n   /**\n    * The name of the Token contract\n    * @type {string}\n    * @memberof Nft\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Nft\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface NftCollection\n  */\n export interface NftCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftCollection\n    */\n   pageSize?: number;\n   /**\n    *\n    * @type {Array<Nft>}\n    * @memberof NftCollection\n    */\n   result?: Array<Nft>;\n }\n /**\n  *\n  * @export\n  * @interface NftContractMetadata\n  */\n export interface NftContractMetadata {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   tokenAddress: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   name: string;\n   /**\n    * The abi of the token Contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   abi?: string;\n   /**\n    * value -1 if the contract does not support token_uri\n    * @type {number}\n    * @memberof NftContractMetadata\n    */\n   supportsTokenUri?: number;\n   /**\n    * Timestamp of when the contract was last synced with the node\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   syncedAt?: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   symbol: string;\n   /**\n    * The type of NFT contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   contractType: string;\n }\n /**\n  *\n  * @export\n  * @interface NftContractMetadataCollection\n  */\n export interface NftContractMetadataCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   total: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   page: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   pageSize: number;\n   /**\n    *\n    * @type {Array<NftContractMetadata>}\n    * @memberof NftContractMetadataCollection\n    */\n   result: Array<NftContractMetadata>;\n }\n /**\n  *\n  * @export\n  * @interface NftOwner\n  */\n export interface NftOwner {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenId: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof NftOwner\n    */\n   contractType: string;\n   /**\n    * The address of the owner of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   ownerOf: string;\n   /**\n    * The blocknumber when the amount or owner changed\n    * @type {string}\n    * @memberof NftOwner\n    */\n   blockNumber: string;\n   /**\n    * The blocknumber when the NFT was minted\n    * @type {string}\n    * @memberof NftOwner\n    */\n   blockNumberMinted: string;\n   /**\n    * The uri to the metadata of the token\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenUri?: string;\n   /**\n    * The metadata of the token\n    * @type {string}\n    * @memberof NftOwner\n    */\n   metadata?: string;\n   /**\n    * when the metadata was last updated\n    * @type {string}\n    * @memberof NftOwner\n    */\n   syncedAt?: string;\n   /**\n    * The number of this item the user owns (used by ERC1155)\n    * @type {string}\n    * @memberof NftOwner\n    */\n   amount?: string;\n   /**\n    * The name of the Token contract\n    * @type {string}\n    * @memberof NftOwner\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof NftOwner\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface NftOwnerCollection\n  */\n export interface NftOwnerCollection {\n   /**\n    * The syncing status of the address [SYNCING/SYNCED]\n    * @type {string}\n    * @memberof NftOwnerCollection\n    */\n   status?: string;\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n  pageSize?: number;\n   /**\n    *\n    * @type {Array<NftOwner>}\n    * @memberof NftOwnerCollection\n    */\n   result?: Array<NftOwner>;\n }\n /**\n  *\n  * @export\n  * @interface NftTransfer\n  */\n export interface NftTransfer {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   tokenId: string;\n   /**\n    * The address that sent the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   fromAddress?: string;\n   /**\n    * The address that recieved the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   toAddress: string;\n   /**\n    * The number of tokens transferred\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   amount?: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   contractType: string;\n   /**\n    * The blocknumber of the transaction\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockNumber: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockTimestamp: string;\n   /**\n    * The block hash of the transaction\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockHash: string;\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionHash: string;\n   /**\n    * The transaction type\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionType?: string;\n   /**\n    * The transaction index\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionIndex?: string;\n   /**\n    * The log index\n    * @type {number}\n    * @memberof NftTransfer\n    */\n   logIndex: number;\n }\n /**\n  *\n  * @export\n  * @interface NftTransferCollection\n  */\n export interface NftTransferCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   total: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   page: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   pageSize: number;\n   /**\n    *\n    * @type {Array<NftTransfer>}\n    * @memberof NftTransferCollection\n    */\n   result: Array<NftTransfer>;\n }\n /**\n  *\n  * @export\n  * @interface Resolve\n  */\n export interface Resolve {\n   /**\n    * Resolved domain address\n    * @type {string}\n    * @memberof Resolve\n    */\n   address: string;\n }\n /**\n  *\n  * @export\n  * @interface Transaction\n  */\n export interface Transaction {\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   hash: string;\n   /**\n    * The nonce of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   nonce: string;\n   /**\n    * The transaction index\n    * @type {string}\n    * @memberof Transaction\n    */\n   transactionIndex: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof Transaction\n    */\n   fromAddress: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof Transaction\n    */\n   toAddress: string;\n   /**\n    * The value that was transfered (in wei)\n    * @type {string}\n    * @memberof Transaction\n    */\n   value: string;\n   /**\n    * The gas of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   gas: string;\n   /**\n    * The gas price\n    * @type {string}\n    * @memberof Transaction\n    */\n   gasPrice: string;\n   /**\n    * The input\n    * @type {string}\n    * @memberof Transaction\n    */\n   input: string;\n   /**\n    * The receipt cumulative gas used\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptCumulativeGasUsed: string;\n   /**\n    * The receipt gas used\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptGasUsed: string;\n   /**\n    * The receipt contract address\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptContractAddress: string;\n   /**\n    * The receipt root\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptRoot: string;\n   /**\n    * The receipt status\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptStatus: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockHash: string;\n }\n /**\n  *\n  * @export\n  * @interface TransactionCollection\n  */\n export interface TransactionCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   pageSize?: number;\n   /**\n    *\n    * @type {Array<Transaction>}\n    * @memberof TransactionCollection\n    */\n   result?: Array<Transaction>;\n }\n /**\n  * AccountApi - fetch parameter creator\n  * @export\n  */\n export const AccountApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getHistoricalNFTTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/nft/transfers/verbose`.replace(\n         `{${'address'}}`,\n         encodeURIComponent(String(address)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/nft/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (direction !== undefined) {\n         localVarQueryParameter['direction'] = direction;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError('address', 'Required parameter address was null or undefined when calling getNFTs.');\n       }\n       const localVarPath = `/{address}/nft`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTsForContract.',\n         );\n       }\n       // verify required parameter 'tokenAddress' is not null or undefined\n       if (tokenAddress === null || tokenAddress === undefined) {\n         throw new RequiredError(\n           'tokenAddress',\n           'Required parameter tokenAddress was null or undefined when calling getNFTsForContract.',\n         );\n       }\n       const localVarPath = `/{address}/nft/{token_address}`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_address'}}`, encodeURIComponent(String(tokenAddress)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       toBlock?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNativeBalance.',\n         );\n       }\n       const localVarPath = `/{address}/balance`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       toBlock?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenBalances.',\n         );\n       }\n       const localVarPath = `/{address}/erc20`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/erc20/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTransactions.',\n         );\n       }\n       const localVarPath = `/{address}`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * AccountApi - functional programming interface\n  * @export\n  */\n export const AccountApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HistoricalNftTransfer>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getHistoricalNFTTransfers(\n         address,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTTransfers(\n         address,\n         chain,\n         format,\n         direction,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTs(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTsForContract(\n         address,\n         tokenAddress,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       toBlock?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NativeBalance> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNativeBalance(\n         address,\n         chain,\n         providerUrl,\n         toBlock,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       toBlock?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20TokenBalance>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTokenBalances(\n         address,\n         chain,\n         subdomain,\n         toBlock,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Transaction>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTokenTransfers(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTransactions(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * AccountApi - factory interface\n  * @export\n  */\n export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getHistoricalNFTTransfers(\n         address,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTTransfers(\n         address,\n         chain,\n         format,\n         direction,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTs(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTsForContract(\n         address,\n         tokenAddress,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(address: string, chain?: ChainList, providerUrl?: string, toBlock?: number, options?: any) {\n       return AccountApiFp(configuration).getNativeBalance(\n         address,\n         chain,\n         providerUrl,\n         toBlock,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(address: string, chain?: ChainList, subdomain?: string, toBlock?: number, options?: any) {\n       return AccountApiFp(configuration).getTokenBalances(address, chain, subdomain, toBlock, options)(fetch, basePath);\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getTokenTransfers(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getTransactions(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * AccountApi - object-oriented interface\n  * @export\n  * @class AccountApi\n  * @extends {BaseAPI}\n  */\n export class AccountApi extends BaseAPI {\n   /**\n    * Gets NFT token transactions in descending order based on block number\n    * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getHistoricalNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getHistoricalNFTTransfers(\n       address,\n       chain,\n       subdomain,\n       providerUrl,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers to and from a given address\n    * @param {string} address The sender or recepient of the transfer\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {string} [direction] The transfer direction\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     direction?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTTransfers(\n       address,\n       chain,\n       format,\n       direction,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n    * @summary Gets the NFTs owned by a given address\n    * @param {string} address The owner of a given token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTs(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTs(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n    * @summary Gets the NFTs owned by a given address\n    * @param {string} address The owner of a given token\n    * @param {string} tokenAddress Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTsForContract(\n     address: string,\n     tokenAddress: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTsForContract(\n       address,\n       tokenAddress,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets native balance for a specific address\n    * @summary Gets native balance for a specific address.\n    * @param {string} address The address for which the native balance will be checked\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [toBlock] The block number on which the balances should be checked\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNativeBalance(address: string, chain?: ChainList, providerUrl?: string, toBlock?: number, options?: any) {\n     return AccountApiFp(this.configuration).getNativeBalance(\n       address,\n       chain,\n       providerUrl,\n       toBlock,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets token balances for a specific address\n    * @summary Gets token balances for a specific address.\n    * @param {string} address The address for which token balances will be checked\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [toBlock] The block number on which the balances should be checked\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTokenBalances(address: string, chain?: ChainList, subdomain?: string, toBlock?: number, options?: any) {\n     return AccountApiFp(this.configuration).getTokenBalances(\n       address,\n       chain,\n       subdomain,\n       toBlock,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets ERC20 token transactions in descending order based on block number\n    * @summary Gets erc 20 token transactions\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTokenTransfers(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getTokenTransfers(\n       address,\n       chain,\n       subdomain,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets native transactions in descending order based on block number\n    * @summary Gets native transactions\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTransactions(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getTransactions(\n       address,\n       chain,\n       subdomain,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n /**\n  * NativeApi - fetch parameter creator\n  * @export\n  */\n export const NativeApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'blockNumberOrHash' is not null or undefined\n       if (blockNumberOrHash === null || blockNumberOrHash === undefined) {\n         throw new RequiredError(\n           'blockNumberOrHash',\n           'Required parameter blockNumberOrHash was null or undefined when calling getBlock.',\n         );\n       }\n       const localVarPath = `/block/{block_number_or_hash}`.replace(\n         `{${'block_number_or_hash'}}`,\n         encodeURIComponent(String(blockNumberOrHash)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getContractEvents.',\n         );\n       }\n       // verify required parameter 'topic' is not null or undefined\n       if (topic === null || topic === undefined) {\n         throw new RequiredError(\n           'topic',\n           'Required parameter topic was null or undefined when calling getContractEvents.',\n         );\n       }\n       const localVarPath = `/{address}/events`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (topic !== undefined) {\n         localVarQueryParameter['topic'] = topic;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarHeaderParameter['Content-Type'] = 'application/json';\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n       const needsSerialization =\n         <any>'any' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n       localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : body || '';\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'transactionHash' is not null or undefined\n       if (transactionHash === null || transactionHash === undefined) {\n         throw new RequiredError(\n           'transactionHash',\n           'Required parameter transactionHash was null or undefined when calling getTransaction.',\n         );\n       }\n       const localVarPath = `/transaction/{transaction_hash}`.replace(\n         `{${'transaction_hash'}}`,\n         encodeURIComponent(String(transactionHash)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'body' is not null or undefined\n       if (body === null || body === undefined) {\n         throw new RequiredError(\n           'body',\n           'Required parameter body was null or undefined when calling runContractFunction.',\n         );\n       }\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling runContractFunction.',\n         );\n       }\n       // verify required parameter 'functionName' is not null or undefined\n       if (functionName === null || functionName === undefined) {\n         throw new RequiredError(\n           'functionName',\n           'Required parameter functionName was null or undefined when calling runContractFunction.',\n         );\n       }\n       const localVarPath = `/{address}/function`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (functionName !== undefined) {\n         localVarQueryParameter['function_name'] = functionName;\n       }\n \n       localVarHeaderParameter['Content-Type'] = 'application/json';\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n       const needsSerialization =\n         <any>'any' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n       localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : body || '';\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * NativeApi - functional programming interface\n  * @export\n  */\n export const NativeApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(\n       blockNumberOrHash: string,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Block> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getBlock(\n         blockNumberOrHash,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LogEvent>> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getContractEvents(\n         address,\n         topic,\n         body,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(\n       transactionHash: string,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<BlockTransaction> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getTransaction(\n         transactionHash,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).runContractFunction(\n         body,\n         address,\n         functionName,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * NativeApi - factory interface\n  * @export\n  */\n export const NativeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n       return NativeApiFp(configuration).getBlock(blockNumberOrHash, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return NativeApiFp(configuration).getContractEvents(\n         address,\n         topic,\n         body,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n       return NativeApiFp(configuration).getTransaction(transactionHash, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return NativeApiFp(configuration).runContractFunction(\n         body,\n         address,\n         functionName,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * NativeApi - object-oriented interface\n  * @export\n  * @class NativeApi\n  * @extends {BaseAPI}\n  */\n export class NativeApi extends BaseAPI {\n   /**\n    * Gets the contents of a block by block hash\n    * @summary Gets block contents by block hash\n    * @param {string} blockNumberOrHash The block hash or block number\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n     return NativeApiFp(this.configuration).getBlock(\n       blockNumberOrHash,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets events in descending order based on block number\n    * @summary Gets events by topic\n    * @param {string} address address\n    * @param {string} topic The topic of the event\n    * @param {any} [body] ABI of the specific event\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getContractEvents(\n     address: string,\n     topic: string,\n     body?: any,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return NativeApiFp(this.configuration).getContractEvents(\n       address,\n       topic,\n       body,\n       chain,\n       subdomain,\n       providerUrl,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the contents of a block transaction by hash\n    * @summary Gets block contents by block hash\n    * @param {string} transactionHash The transaction hash\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n     return NativeApiFp(this.configuration).getTransaction(\n       transactionHash,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Runs a given function of a contract abi and returns readonly data\n    * @summary Runs a function of a contract abi\n    * @param {any} body Optional description in *Markdown*\n    * @param {string} address address\n    * @param {string} functionName function_name\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public runContractFunction(\n     body: any,\n     address: string,\n     functionName: string,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return NativeApiFp(this.configuration).runContractFunction(\n       body,\n       address,\n       functionName,\n       chain,\n       subdomain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n /**\n  * ResolveApi - fetch parameter creator\n  * @export\n  */\n export const ResolveApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(domain: string, currency?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'domain' is not null or undefined\n       if (domain === null || domain === undefined) {\n         throw new RequiredError(\n           'domain',\n           'Required parameter domain was null or undefined when calling resolveDomain.',\n         );\n       }\n       const localVarPath = `/resolve/{domain}`.replace(`{${'domain'}}`, encodeURIComponent(String(domain)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (currency !== undefined) {\n         localVarQueryParameter['currency'] = currency;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * ResolveApi - functional programming interface\n  * @export\n  */\n export const ResolveApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(\n       domain: string,\n       currency?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Resolve> {\n       const localVarFetchArgs = ResolveApiFetchParamCreator(configuration).resolveDomain(domain, currency, options);\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * ResolveApi - factory interface\n  * @export\n  */\n export const ResolveApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(domain: string, currency?: string, options?: any) {\n       return ResolveApiFp(configuration).resolveDomain(domain, currency, options)(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * ResolveApi - object-oriented interface\n  * @export\n  * @class ResolveApi\n  * @extends {BaseAPI}\n  */\n export class ResolveApi extends BaseAPI {\n   /**\n    * Resolves an Unstoppable domain and returns the address\n    * @summary Resolves an Unstoppable domain and returns the address\n    * @param {string} domain Domain to be resolved\n    * @param {string} [currency] The currency to query\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof ResolveApi\n    */\n   public resolveDomain(domain: string, currency?: string, options?: any) {\n     return ResolveApiFp(this.configuration).resolveDomain(domain, currency, options)(this.fetch, this.basePath);\n   }\n }\n /**\n  * TokenApi - fetch parameter creator\n  * @export\n  */\n export const TokenApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getAllTokenIds.',\n         );\n       }\n       const localVarPath = `/nft/{address}`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getContractNFTTransfers.',\n         );\n       }\n       const localVarPath = `/nft/{address}/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(address: string, chain?: ChainList, options: any = {}): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTMetadata.',\n         );\n       }\n       const localVarPath = `/nft/{address}/metadata`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTOwners.',\n         );\n       }\n       const localVarPath = `/nft/{address}/owners`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       // verify required parameter 'ownerAddress' is not null or undefined\n       if (ownerAddress === null || ownerAddress === undefined) {\n         throw new RequiredError(\n           'ownerAddress',\n           'Required parameter ownerAddress was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       // verify required parameter 'spenderAddress' is not null or undefined\n       if (spenderAddress === null || spenderAddress === undefined) {\n         throw new RequiredError(\n           'spenderAddress',\n           'Required parameter spenderAddress was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       const localVarPath = `/erc20/{address}/allowance`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (ownerAddress !== undefined) {\n         localVarQueryParameter['owner_address'] = ownerAddress;\n       }\n \n       if (spenderAddress !== undefined) {\n         localVarQueryParameter['spender_address'] = spenderAddress;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenIdMetadata.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getTokenIdMetadata.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenIdOwners.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getTokenIdOwners.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}/owners`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'addresses' is not null or undefined\n       if (addresses === null || addresses === undefined) {\n         throw new RequiredError(\n           'addresses',\n           'Required parameter addresses was null or undefined when calling getTokenMetadata.',\n         );\n       }\n       const localVarPath = `/erc20/metadata`;\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (addresses) {\n         localVarQueryParameter['addresses'] = addresses;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(\n       symbols: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'symbols' is not null or undefined\n       if (symbols === null || symbols === undefined) {\n         throw new RequiredError(\n           'symbols',\n           'Required parameter symbols was null or undefined when calling getTokenMetadataBySymbol.',\n         );\n       }\n       const localVarPath = `/erc20/metadata/symbols`;\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (symbols) {\n         localVarQueryParameter['symbols'] = symbols;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       exchange?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenPrice.',\n         );\n       }\n       const localVarPath = `/erc20/{address}/price`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (exchange !== undefined) {\n         localVarQueryParameter['exchange'] = exchange;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getWalletTokenIdTransfers.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getWalletTokenIdTransfers.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}/transfers`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * TokenApi - functional programming interface\n  * @export\n  */\n export const TokenApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getAllTokenIds(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getContractNFTTransfers(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(\n       address: string,\n       chain?: ChainList,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftContractMetadata> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getNFTMetadata(address, chain, options);\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getNFTOwners(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Erc20Allowance> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenAllowance(\n         address,\n         ownerAddress,\n         spenderAddress,\n         chain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Nft> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenIdMetadata(\n         address,\n         tokenId,\n         chain,\n         format,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenIdOwners(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Metadata>> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenMetadata(\n         addresses,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(\n       symbols: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Metadata>> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenMetadataBySymbol(\n         symbols,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       exchange?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Erc20Price> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenPrice(\n         address,\n         chain,\n         providerUrl,\n         exchange,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getWalletTokenIdTransfers(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * TokenApi - factory interface\n  * @export\n  */\n export const TokenApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getAllTokenIds(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getContractNFTTransfers(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(address: string, chain?: ChainList, options?: any) {\n       return TokenApiFp(configuration).getNFTMetadata(address, chain, options)(fetch, basePath);\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getNFTOwners(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenAllowance(\n         address,\n         ownerAddress,\n         spenderAddress,\n         chain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(address: string, tokenId: string, chain?: ChainList, format?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenIdMetadata(address, tokenId, chain, format, options)(fetch, basePath);\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenIdOwners(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenMetadata(\n         addresses,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(symbols: Array<string>, chain?: ChainList, subdomain?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenMetadataBySymbol(symbols, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(address: string, chain?: ChainList, providerUrl?: string, exchange?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenPrice(address, chain, providerUrl, exchange, options)(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getWalletTokenIdTransfers(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * TokenApi - object-oriented interface\n  * @export\n  * @class TokenApi\n  * @extends {BaseAPI}\n  */\n export class TokenApi extends BaseAPI {\n   /**\n    * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Retrieves the unique NFTs inside a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getAllTokenIds(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getAllTokenIds(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers of a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getContractNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getContractNFTTransfers(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the global metadata for a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getNFTMetadata(address: string, chain?: ChainList, options?: any) {\n     return TokenApiFp(this.configuration).getNFTMetadata(address, chain, options)(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the owners of the NFTs of a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getNFTOwners(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getNFTOwners(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the amount which the spender is allowed to withdraw from the spender\n    * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n    * @param {string} address The address of the token contract\n    * @param {string} ownerAddress The address of the token owner\n    * @param {string} spenderAddress The address of the token spender\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenAllowance(\n     address: string,\n     ownerAddress: string,\n     spenderAddress: string,\n     chain?: ChainList,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenAllowance(\n       address,\n       ownerAddress,\n       spenderAddress,\n       chain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the NFT with the given id of a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenIdMetadata(address: string, tokenId: string, chain?: ChainList, format?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenIdMetadata(\n       address,\n       tokenId,\n       chain,\n       format,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the owners of NFTs for a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenIdOwners(\n     address: string,\n     tokenId: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenIdOwners(\n       address,\n       tokenId,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n    * @summary Gets token metadata\n    * @param {Array<string>} addresses The addresses to get metadata for\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenMetadata(\n     addresses: Array<string>,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenMetadata(\n       addresses,\n       chain,\n       subdomain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n    * @summary Gets token metadata\n    * @param {Array<string>} symbols The symbols to get metadata for\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenMetadataBySymbol(symbols: Array<string>, chain?: ChainList, subdomain?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenMetadataBySymbol(\n       symbols,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns the price nominated in the native token and usd for a given token contract address.\n    * @summary Gets token price\n    * @param {string} address The address of the token contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {string} [exchange] The factory name or address of the token exchange\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenPrice(address: string, chain?: ChainList, providerUrl?: string, exchange?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenPrice(\n       address,\n       chain,\n       providerUrl,\n       exchange,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers of a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getWalletTokenIdTransfers(\n     address: string,\n     tokenId: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getWalletTokenIdTransfers(\n       address,\n       tokenId,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n ","\nimport {\n  MORALIS_APPLICATION_ID,\n  MORALIS_API_KEY\n} from './constants'\n\nimport { Configuration } from './moralis/configuration';\nimport * as api from './moralis/api';\n\nconst config: Configuration = { apiKey: MORALIS_API_KEY, accessToken: MORALIS_APPLICATION_ID };\nconst instance: api.AccountApi = new api.AccountApi(config);\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n  * Gets all NFTs owned by the given address * \n  * @summary Gets all the NFTs owned by a given address\n  * @param {string} address The owner of a given token\n  * @param {ChainList} [chain] The chain to query\n  * @param {string} [format] The format of the token id\n  * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n  * @param {string} [delayLimit] The deay limt to sync moralis api. Default 10,000 ms\n  * @throws {RequiredError}\n  * @memberof AccountApi\n*/\nexport const getAllNFTs = async (\n  address: string,\n  chain?: api.ChainList,\n  format?: string,\n  order?: string,\n  delayLimit: number = 10000,\n): Promise<Array<api.NftOwner>> => {\n  \n  let NFTs: Array<api.NftOwner> = [];\n  // delay 10 secs to sync the address for the first time.\n\n  try{\n\n    let offset = 0, totalCount = 0;\n    let page = 0, pageSize = 100;\n    let waitSyncTime = -1;\n\n    while(offset <= totalCount) {\n      const response = await instance.getNFTs(address, chain, format, offset, offset + pageSize);\n\n      if(waitSyncTime > delayLimit ) {\n        console.error(\"error occured in getAllNFTs: sync failed\");\n        throw(new Error(\"error occured in getAllNFTs: sync failed\"));\n      }\n\n      if(response.status == 'SYNCING') {\n        await sleep(3000);\n        waitSyncTime += 3000;\n        continue;\n      }\n\n      NFTs = [...NFTs, ...response.result];\n      \n      page++;\n      offset = page * pageSize;\n      totalCount = response.total;\n    }\n\n  } catch(err) {\n    console.error(\"error occured in getNFTs:\", err);\n    throw(err);\n  }\n  return NFTs;\n}\n\n\nconst runProcess = async () => {\n  console.log(\"woww\");\n  const res = await getAllNFTs(\"0x9B6134Fe036F1C22D9Fe76c15AC81B7bC31212eB\", api.ChainList.Rinkeby);\n  console.log(res.length);\n}\n\nrunProcess();\n"],"names":["undefined","MORALIS_APPLICATION_ID","process","env","MORALIS_API_KEY","BASE_PATH","replace","BaseAPI","configuration","basePath","fetch","isomorphicFetch","RequiredError","field","msg","Error","ChainList","AccountApiFetchParamCreator","getHistoricalNFTTransfers","address","chain","subdomain","providerUrl","fromBlock","toBlock","offset","limit","options","localVarPath","encodeURIComponent","String","localVarUrlObj","url","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","apiKey","localVarApiKeyValue","query","search","headers","getNFTTransfers","format","direction","order","getNFTs","getNFTsForContract","tokenAddress","getNativeBalance","getTokenBalances","getTokenTransfers","getTransactions","AccountApiFp","localVarFetchArgs","then","response","status","json","AccountApi","config","accessToken","instance","api","sleep","ms","Promise","resolve","setTimeout","getAllNFTs","delayLimit","NFTs","totalCount","page","pageSize","waitSyncTime","console","error","result","total","runProcess","log","Rinkeby","res","length"],"mappings":"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"}