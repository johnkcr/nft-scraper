{"version":3,"file":"nft-scraper.cjs.production.min.js","sources":["../src/moralis/api.ts","../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/index.ts"],"sourcesContent":["// tslint:disable\n/**\n * Moralis API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 2\n *\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\n import * as url from 'url';\n import * as isomorphicFetch from 'isomorphic-fetch';\n import { Configuration } from './configuration';\n \n const BASE_PATH = 'https://deep-index.moralis.io/api/v2'.replace(/\\/+$/, '');\n \n /**\n  *\n  * @export\n  */\n export const COLLECTION_FORMATS = {\n   csv: ',',\n   ssv: ' ',\n   tsv: '\\t',\n   pipes: '|',\n };\n \n /**\n  *\n  * @export\n  * @interface FetchAPI\n  */\n export interface FetchAPI {\n   (url: string, init?: any): Promise<Response>;\n }\n \n /**\n  *\n  * @export\n  * @interface FetchArgs\n  */\n export interface FetchArgs {\n   url: string;\n   options: any;\n }\n \n /**\n  *\n  * @export\n  * @class BaseAPI\n  */\n export class BaseAPI {\n   protected configuration: Configuration;\n \n   constructor(\n     configuration?: Configuration,\n     protected basePath: string = BASE_PATH,\n     protected fetch: FetchAPI = isomorphicFetch,\n   ) {\n     if (configuration) {\n       this.configuration = configuration;\n       this.basePath = configuration.basePath || this.basePath;\n     }\n   }\n }\n \n /**\n  *\n  * @export\n  * @class RequiredError\n  * @extends {Error}\n  */\n export class RequiredError extends Error {\n   name: 'RequiredError';\n   constructor(public field: string, msg?: string) {\n     super(msg);\n   }\n }\n \n /**\n  *\n  * @export\n  * @interface Block\n  */\n export interface Block {\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Block\n    */\n   timestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Block\n    */\n   number: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Block\n    */\n   hash: string;\n   /**\n    * The block hash of the parent block\n    * @type {string}\n    * @memberof Block\n    */\n   parentHash: string;\n   /**\n    * The nonce\n    * @type {string}\n    * @memberof Block\n    */\n   nonce: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   sha3Uncles: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   logsBloom: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   transactionsRoot: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   stateRoot: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   receiptsRoot: string;\n   /**\n    * The address of the miner\n    * @type {string}\n    * @memberof Block\n    */\n   miner: string;\n   /**\n    * The difficulty of the block\n    * @type {string}\n    * @memberof Block\n    */\n   difficulty: string;\n   /**\n    * The total difficulty\n    * @type {string}\n    * @memberof Block\n    */\n   totalDifficulty: string;\n   /**\n    * The block size\n    * @type {string}\n    * @memberof Block\n    */\n   size: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Block\n    */\n   extraData: string;\n   /**\n    * The gas limit\n    * @type {string}\n    * @memberof Block\n    */\n   gasLimit: string;\n   /**\n    * The gas used\n    * @type {string}\n    * @memberof Block\n    */\n   gasUsed: string;\n   /**\n    * The number of transactions in the block\n    * @type {string}\n    * @memberof Block\n    */\n   transactionCount: string;\n   /**\n    * The transactions in the block\n    * @type {Array<BlockTransaction>}\n    * @memberof Block\n    */\n   transactions: Array<BlockTransaction>;\n }\n /**\n  *\n  * @export\n  * @interface BlockTransaction\n  */\n export interface BlockTransaction {\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   hash: string;\n   /**\n    * The nonce\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   nonce: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   transactionIndex: string;\n   /**\n    * The from address\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   fromAddress: string;\n   /**\n    * The to address\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   toAddress: string;\n   /**\n    * The value sent\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   value: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   gas?: string;\n   /**\n    * The gas price\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   gasPrice: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   input: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptCumulativeGasUsed: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptGasUsed: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptContractAddress?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptRoot?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   receiptStatus: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockNumber: string;\n   /**\n    * The hash of the block\n    * @type {string}\n    * @memberof BlockTransaction\n    */\n   blockHash: string;\n   /**\n    * The logs of the transaction\n    * @type {Array<Log>}\n    * @memberof BlockTransaction\n    */\n   logs: Array<Log>;\n }\n /**\n  *\n  * @export\n  * @enum {string}\n  */\n export enum ChainList {\n   Eth = <any>'eth',\n   _0x1 = <any>'0x1',\n   Ropsten = <any>'ropsten',\n   _0x3 = <any>'0x3',\n   Rinkeby = <any>'rinkeby',\n   _0x4 = <any>'0x4',\n   Goerli = <any>'goerli',\n   _0x5 = <any>'0x5',\n   Kovan = <any>'kovan',\n   _0x2a = <any>'0x2a',\n   Polygon = <any>'polygon',\n   _0x89 = <any>'0x89',\n   Mumbai = <any>'mumbai',\n   _0x13881 = <any>'0x13881',\n   Bsc = <any>'bsc',\n   _0x38 = <any>'0x38',\n   BscTestnet = <any>'bsc testnet',\n   _0x61 = <any>'0x61',\n }\n /**\n  *\n  * @export\n  * @interface Erc20Allowance\n  */\n export interface Erc20Allowance {\n   /**\n    * The allowance\n    * @type {string}\n    * @memberof Erc20Allowance\n    */\n   allowance: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Metadata\n  */\n export interface Erc20Metadata {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   address: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   symbol: string;\n   /**\n    * The number of decimals on of the token\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   decimals: string;\n   /**\n    * The logo of the token\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   logo?: string;\n   /**\n    * The logo hash\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   logoHash?: string;\n   /**\n    * The thumbnail of the logo\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   thumbnail?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   blockNumber?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc20Metadata\n    */\n   validated?: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Price\n  */\n export interface Erc20Price {\n   /**\n    *\n    * @type {NativeErc20Price}\n    * @memberof Erc20Price\n    */\n   nativePrice?: NativeErc20Price;\n   /**\n    * The price in USD for the token\n    * @type {number}\n    * @memberof Erc20Price\n    */\n   usdPrice: number;\n   /**\n    * The address of the exchange used to calculate the price\n    * @type {string}\n    * @memberof Erc20Price\n    */\n   exchangeAddress?: string;\n   /**\n    * The name of the exchange used for calculating the price\n    * @type {string}\n    * @memberof Erc20Price\n    */\n   exchangeName?: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20TokenBalance\n  */\n export interface Erc20TokenBalance {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   tokenAddress: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   symbol: string;\n   /**\n    * The logo of the token\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   logo?: string;\n   /**\n    * The thumbnail of the logo\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   thumbnail?: string;\n   /**\n    * The number of decimals on of the token\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   decimals: string;\n   /**\n    * Timestamp of when the contract was last synced with the node\n    * @type {string}\n    * @memberof Erc20TokenBalance\n    */\n   balance: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc20Transaction\n  */\n export interface Erc20Transaction {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   transactionHash: string;\n   /**\n    * The address of the token\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   blockHash: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   toAddress: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   fromAddress: string;\n   /**\n    * The value that was transfered (in wei)\n    * @type {string}\n    * @memberof Erc20Transaction\n    */\n   value: string;\n }\n /**\n  *\n  * @export\n  * @interface Erc721Metadata\n  */\n export interface Erc721Metadata {\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   symbol: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Erc721Metadata\n    */\n   tokenUri?: string;\n }\n /**\n  *\n  * @export\n  * @interface HistoricalNftTransfer\n  */\n export interface HistoricalNftTransfer {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   transactionHash: string;\n   /**\n    * The address of the token\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   blockHash: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   toAddress: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   fromAddress: string;\n   /**\n    * The token ids of the tokens that were transfered\n    * @type {Array<string>}\n    * @memberof HistoricalNftTransfer\n    */\n   tokenIds: Array<string>;\n   /**\n    * The amounts that were transfered\n    * @type {Array<string>}\n    * @memberof HistoricalNftTransfer\n    */\n   amounts: Array<string>;\n   /**\n    * They contract type of the transfer\n    * @type {string}\n    * @memberof HistoricalNftTransfer\n    */\n   contractType: string;\n }\n /**\n  *\n  * @export\n  * @interface Log\n  */\n export interface Log {\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   logIndex: string;\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof Log\n    */\n   transactionHash: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   transactionIndex: string;\n   /**\n    * The address of the contract\n    * @type {string}\n    * @memberof Log\n    */\n   address: string;\n   /**\n    * The data of the log\n    * @type {string}\n    * @memberof Log\n    */\n   data: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic0: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic1?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic2?: string;\n   /**\n    *\n    * @type {string}\n    * @memberof Log\n    */\n   topic3?: string;\n   /**\n    * The timestamp of the block\n    * @type {string}\n    * @memberof Log\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Log\n    */\n   blockNumber: string;\n   /**\n    * The hash of the block\n    * @type {string}\n    * @memberof Log\n    */\n   blockHash: string;\n }\n /**\n  *\n  * @export\n  * @interface LogEvent\n  */\n export interface LogEvent {\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof LogEvent\n    */\n   transactionHash: string;\n   /**\n    * The address of the contract\n    * @type {string}\n    * @memberof LogEvent\n    */\n   address: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof LogEvent\n    */\n   blockHash: string;\n   /**\n    * The content of the event\n    * @type {any}\n    * @memberof LogEvent\n    */\n   data: any;\n }\n /**\n  *\n  * @export\n  * @interface NativeBalance\n  */\n export interface NativeBalance {\n   /**\n    * The balance\n    * @type {string}\n    * @memberof NativeBalance\n    */\n   balance: string;\n }\n /**\n  *\n  * @export\n  * @interface NativeErc20Price\n  */\n export interface NativeErc20Price {\n   /**\n    * The native price of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   value: string;\n   /**\n    * The number of decimals of the token\n    * @type {number}\n    * @memberof NativeErc20Price\n    */\n   decimals: number;\n   /**\n    * The Name of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   name: string;\n   /**\n    * The Symbol of the token\n    * @type {string}\n    * @memberof NativeErc20Price\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface Nft\n  */\n export interface Nft {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenId: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof Nft\n    */\n   contractType: string;\n   /**\n    * The uri to the metadata of the token\n    * @type {string}\n    * @memberof Nft\n    */\n   tokenUri?: string;\n   /**\n    * The metadata of the token\n    * @type {string}\n    * @memberof Nft\n    */\n   metadata?: string;\n   /**\n    * when the metadata was last updated\n    * @type {string}\n    * @memberof Nft\n    */\n   syncedAt?: string;\n   /**\n    * The number of this item the user owns (used by ERC1155)\n    * @type {string}\n    * @memberof Nft\n    */\n   amount?: string;\n   /**\n    * The name of the Token contract\n    * @type {string}\n    * @memberof Nft\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof Nft\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface NftCollection\n  */\n export interface NftCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftCollection\n    */\n   pageSize?: number;\n   /**\n    *\n    * @type {Array<Nft>}\n    * @memberof NftCollection\n    */\n   result?: Array<Nft>;\n }\n /**\n  *\n  * @export\n  * @interface NftContractMetadata\n  */\n export interface NftContractMetadata {\n   /**\n    * The address of the token contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   tokenAddress: string;\n   /**\n    * The name of the token Contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   name: string;\n   /**\n    * The abi of the token Contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   abi?: string;\n   /**\n    * value -1 if the contract does not support token_uri\n    * @type {number}\n    * @memberof NftContractMetadata\n    */\n   supportsTokenUri?: number;\n   /**\n    * Timestamp of when the contract was last synced with the node\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   syncedAt?: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   symbol: string;\n   /**\n    * The type of NFT contract\n    * @type {string}\n    * @memberof NftContractMetadata\n    */\n   contractType: string;\n }\n /**\n  *\n  * @export\n  * @interface NftContractMetadataCollection\n  */\n export interface NftContractMetadataCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   total: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   page: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftContractMetadataCollection\n    */\n   pageSize: number;\n   /**\n    *\n    * @type {Array<NftContractMetadata>}\n    * @memberof NftContractMetadataCollection\n    */\n   result: Array<NftContractMetadata>;\n }\n /**\n  *\n  * @export\n  * @interface NftOwner\n  */\n export interface NftOwner {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenId: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof NftOwner\n    */\n   contractType: string;\n   /**\n    * The address of the owner of the NFT\n    * @type {string}\n    * @memberof NftOwner\n    */\n   ownerOf: string;\n   /**\n    * The blocknumber when the amount or owner changed\n    * @type {string}\n    * @memberof NftOwner\n    */\n   blockNumber: string;\n   /**\n    * The blocknumber when the NFT was minted\n    * @type {string}\n    * @memberof NftOwner\n    */\n   blockNumberMinted: string;\n   /**\n    * The uri to the metadata of the token\n    * @type {string}\n    * @memberof NftOwner\n    */\n   tokenUri?: string;\n   /**\n    * The metadata of the token\n    * @type {string}\n    * @memberof NftOwner\n    */\n   metadata?: string;\n   /**\n    * when the metadata was last updated\n    * @type {string}\n    * @memberof NftOwner\n    */\n   syncedAt?: string;\n   /**\n    * The number of this item the user owns (used by ERC1155)\n    * @type {string}\n    * @memberof NftOwner\n    */\n   amount?: string;\n   /**\n    * The name of the Token contract\n    * @type {string}\n    * @memberof NftOwner\n    */\n   name: string;\n   /**\n    * The symbol of the NFT contract\n    * @type {string}\n    * @memberof NftOwner\n    */\n   symbol: string;\n }\n /**\n  *\n  * @export\n  * @interface NftOwnerCollection\n  */\n export interface NftOwnerCollection {\n   /**\n    * The syncing status of the address [SYNCING/SYNCED]\n    * @type {string}\n    * @memberof NftOwnerCollection\n    */\n   status?: string;\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftOwnerCollection\n    */\n  page_size?: number;\n   /**\n    *\n    * @type {Array<NftOwner>}\n    * @memberof NftOwnerCollection\n    */\n   result?: Array<NftOwner>;\n }\n /**\n  *\n  * @export\n  * @interface NftTransfer\n  */\n export interface NftTransfer {\n   /**\n    * The address of the contract of the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   tokenAddress: string;\n   /**\n    * The token id of the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   tokenId: string;\n   /**\n    * The address that sent the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   fromAddress?: string;\n   /**\n    * The address that recieved the NFT\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   toAddress: string;\n   /**\n    * The number of tokens transferred\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   amount?: string;\n   /**\n    * The type of NFT contract standard\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   contractType: string;\n   /**\n    * The blocknumber of the transaction\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockNumber: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockTimestamp: string;\n   /**\n    * The block hash of the transaction\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   blockHash: string;\n   /**\n    * The transaction hash\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionHash: string;\n   /**\n    * The transaction type\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionType?: string;\n   /**\n    * The transaction index\n    * @type {string}\n    * @memberof NftTransfer\n    */\n   transactionIndex?: string;\n   /**\n    * The log index\n    * @type {number}\n    * @memberof NftTransfer\n    */\n   logIndex: number;\n }\n /**\n  *\n  * @export\n  * @interface NftTransferCollection\n  */\n export interface NftTransferCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   total: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   page: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof NftTransferCollection\n    */\n   pageSize: number;\n   /**\n    *\n    * @type {Array<NftTransfer>}\n    * @memberof NftTransferCollection\n    */\n   result: Array<NftTransfer>;\n }\n /**\n  *\n  * @export\n  * @interface Resolve\n  */\n export interface Resolve {\n   /**\n    * Resolved domain address\n    * @type {string}\n    * @memberof Resolve\n    */\n   address: string;\n }\n /**\n  *\n  * @export\n  * @interface Transaction\n  */\n export interface Transaction {\n   /**\n    * The hash of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   hash: string;\n   /**\n    * The nonce of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   nonce: string;\n   /**\n    * The transaction index\n    * @type {string}\n    * @memberof Transaction\n    */\n   transactionIndex: string;\n   /**\n    * The sender\n    * @type {string}\n    * @memberof Transaction\n    */\n   fromAddress: string;\n   /**\n    * The recipient\n    * @type {string}\n    * @memberof Transaction\n    */\n   toAddress: string;\n   /**\n    * The value that was transfered (in wei)\n    * @type {string}\n    * @memberof Transaction\n    */\n   value: string;\n   /**\n    * The gas of the transaction\n    * @type {string}\n    * @memberof Transaction\n    */\n   gas: string;\n   /**\n    * The gas price\n    * @type {string}\n    * @memberof Transaction\n    */\n   gasPrice: string;\n   /**\n    * The input\n    * @type {string}\n    * @memberof Transaction\n    */\n   input: string;\n   /**\n    * The receipt cumulative gas used\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptCumulativeGasUsed: string;\n   /**\n    * The receipt gas used\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptGasUsed: string;\n   /**\n    * The receipt contract address\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptContractAddress: string;\n   /**\n    * The receipt root\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptRoot: string;\n   /**\n    * The receipt status\n    * @type {string}\n    * @memberof Transaction\n    */\n   receiptStatus: string;\n   /**\n    * The block timestamp\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockTimestamp: string;\n   /**\n    * The block number\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockNumber: string;\n   /**\n    * The block hash\n    * @type {string}\n    * @memberof Transaction\n    */\n   blockHash: string;\n }\n /**\n  *\n  * @export\n  * @interface TransactionCollection\n  */\n export interface TransactionCollection {\n   /**\n    * The total number of matches for this query\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   total?: number;\n   /**\n    * The page of the current result\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   page?: number;\n   /**\n    * The number of results per page\n    * @type {number}\n    * @memberof TransactionCollection\n    */\n   pageSize?: number;\n   /**\n    *\n    * @type {Array<Transaction>}\n    * @memberof TransactionCollection\n    */\n   result?: Array<Transaction>;\n }\n /**\n  * AccountApi - fetch parameter creator\n  * @export\n  */\n export const AccountApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getHistoricalNFTTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/nft/transfers/verbose`.replace(\n         `{${'address'}}`,\n         encodeURIComponent(String(address)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/nft/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (direction !== undefined) {\n         localVarQueryParameter['direction'] = direction;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError('address', 'Required parameter address was null or undefined when calling getNFTs.');\n       }\n       const localVarPath = `/{address}/nft`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTsForContract.',\n         );\n       }\n       // verify required parameter 'tokenAddress' is not null or undefined\n       if (tokenAddress === null || tokenAddress === undefined) {\n         throw new RequiredError(\n           'tokenAddress',\n           'Required parameter tokenAddress was null or undefined when calling getNFTsForContract.',\n         );\n       }\n       const localVarPath = `/{address}/nft/{token_address}`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_address'}}`, encodeURIComponent(String(tokenAddress)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       toBlock?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNativeBalance.',\n         );\n       }\n       const localVarPath = `/{address}/balance`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       toBlock?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenBalances.',\n         );\n       }\n       const localVarPath = `/{address}/erc20`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenTransfers.',\n         );\n       }\n       const localVarPath = `/{address}/erc20/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTransactions.',\n         );\n       }\n       const localVarPath = `/{address}`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * AccountApi - functional programming interface\n  * @export\n  */\n export const AccountApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HistoricalNftTransfer>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getHistoricalNFTTransfers(\n         address,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTTransfers(\n         address,\n         chain,\n         format,\n         direction,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTs(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNFTsForContract(\n         address,\n         tokenAddress,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       toBlock?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NativeBalance> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getNativeBalance(\n         address,\n         chain,\n         providerUrl,\n         toBlock,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       toBlock?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20TokenBalance>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTokenBalances(\n         address,\n         chain,\n         subdomain,\n         toBlock,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Transaction>> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTokenTransfers(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionCollection> {\n       const localVarFetchArgs = AccountApiFetchParamCreator(configuration).getTransactions(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * AccountApi - factory interface\n  * @export\n  */\n export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets NFT token transactions in descending order based on block number\n      * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getHistoricalNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getHistoricalNFTTransfers(\n         address,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers to and from a given address\n      * @param {string} address The sender or recepient of the transfer\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {string} [direction] The transfer direction\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       direction?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTTransfers(\n         address,\n         chain,\n         format,\n         direction,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTs(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTs(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n      * @summary Gets the NFTs owned by a given address\n      * @param {string} address The owner of a given token\n      * @param {string} tokenAddress Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTsForContract(\n       address: string,\n       tokenAddress: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getNFTsForContract(\n         address,\n         tokenAddress,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets native balance for a specific address\n      * @summary Gets native balance for a specific address.\n      * @param {string} address The address for which the native balance will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNativeBalance(address: string, chain?: ChainList, providerUrl?: string, toBlock?: number, options?: any) {\n       return AccountApiFp(configuration).getNativeBalance(\n         address,\n         chain,\n         providerUrl,\n         toBlock,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets token balances for a specific address\n      * @summary Gets token balances for a specific address.\n      * @param {string} address The address for which token balances will be checked\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [toBlock] The block number on which the balances should be checked\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenBalances(address: string, chain?: ChainList, subdomain?: string, toBlock?: number, options?: any) {\n       return AccountApiFp(configuration).getTokenBalances(address, chain, subdomain, toBlock, options)(fetch, basePath);\n     },\n     /**\n      * Gets ERC20 token transactions in descending order based on block number\n      * @summary Gets erc 20 token transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenTransfers(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getTokenTransfers(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets native transactions in descending order based on block number\n      * @summary Gets native transactions\n      * @param {string} address address\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransactions(\n       address: string,\n       chain?: ChainList,\n       subdomain?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return AccountApiFp(configuration).getTransactions(\n         address,\n         chain,\n         subdomain,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * AccountApi - object-oriented interface\n  * @export\n  * @class AccountApi\n  * @extends {BaseAPI}\n  */\n export class AccountApi extends BaseAPI {\n   /**\n    * Gets NFT token transactions in descending order based on block number\n    * @summary Gets NFT transfers of a ERC721 or ERC1155 token\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getHistoricalNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getHistoricalNFTTransfers(\n       address,\n       chain,\n       subdomain,\n       providerUrl,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers to and from a given address\n    * @param {string} address The sender or recepient of the transfer\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {string} [direction] The transfer direction\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;token_address\\&quot;, \\&quot;token_address.ASC\\&quot;, \\&quot;token_address.DESC\\&quot;, Example 2: \\&quot;token_address and token_id\\&quot;, \\&quot;token_address.ASC,token_id.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     direction?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTTransfers(\n       address,\n       chain,\n       format,\n       direction,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n    * @summary Gets the NFTs owned by a given address\n    * @param {string} address The owner of a given token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTs(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTs(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets NFTs owned by the given address * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n    * @summary Gets the NFTs owned by a given address\n    * @param {string} address The owner of a given token\n    * @param {string} tokenAddress Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNFTsForContract(\n     address: string,\n     tokenAddress: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getNFTsForContract(\n       address,\n       tokenAddress,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets native balance for a specific address\n    * @summary Gets native balance for a specific address.\n    * @param {string} address The address for which the native balance will be checked\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [toBlock] The block number on which the balances should be checked\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getNativeBalance(address: string, chain?: ChainList, providerUrl?: string, toBlock?: number, options?: any) {\n     return AccountApiFp(this.configuration).getNativeBalance(\n       address,\n       chain,\n       providerUrl,\n       toBlock,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets token balances for a specific address\n    * @summary Gets token balances for a specific address.\n    * @param {string} address The address for which token balances will be checked\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [toBlock] The block number on which the balances should be checked\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTokenBalances(address: string, chain?: ChainList, subdomain?: string, toBlock?: number, options?: any) {\n     return AccountApiFp(this.configuration).getTokenBalances(\n       address,\n       chain,\n       subdomain,\n       toBlock,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets ERC20 token transactions in descending order based on block number\n    * @summary Gets erc 20 token transactions\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTokenTransfers(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getTokenTransfers(\n       address,\n       chain,\n       subdomain,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets native transactions in descending order based on block number\n    * @summary Gets native transactions\n    * @param {string} address address\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof AccountApi\n    */\n   public getTransactions(\n     address: string,\n     chain?: ChainList,\n     subdomain?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return AccountApiFp(this.configuration).getTransactions(\n       address,\n       chain,\n       subdomain,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n /**\n  * NativeApi - fetch parameter creator\n  * @export\n  */\n export const NativeApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'blockNumberOrHash' is not null or undefined\n       if (blockNumberOrHash === null || blockNumberOrHash === undefined) {\n         throw new RequiredError(\n           'blockNumberOrHash',\n           'Required parameter blockNumberOrHash was null or undefined when calling getBlock.',\n         );\n       }\n       const localVarPath = `/block/{block_number_or_hash}`.replace(\n         `{${'block_number_or_hash'}}`,\n         encodeURIComponent(String(blockNumberOrHash)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getContractEvents.',\n         );\n       }\n       // verify required parameter 'topic' is not null or undefined\n       if (topic === null || topic === undefined) {\n         throw new RequiredError(\n           'topic',\n           'Required parameter topic was null or undefined when calling getContractEvents.',\n         );\n       }\n       const localVarPath = `/{address}/events`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (fromBlock !== undefined) {\n         localVarQueryParameter['from_block'] = fromBlock;\n       }\n \n       if (toBlock !== undefined) {\n         localVarQueryParameter['to_block'] = toBlock;\n       }\n \n       if (topic !== undefined) {\n         localVarQueryParameter['topic'] = topic;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       localVarHeaderParameter['Content-Type'] = 'application/json';\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n       const needsSerialization =\n         <any>'any' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n       localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : body || '';\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'transactionHash' is not null or undefined\n       if (transactionHash === null || transactionHash === undefined) {\n         throw new RequiredError(\n           'transactionHash',\n           'Required parameter transactionHash was null or undefined when calling getTransaction.',\n         );\n       }\n       const localVarPath = `/transaction/{transaction_hash}`.replace(\n         `{${'transaction_hash'}}`,\n         encodeURIComponent(String(transactionHash)),\n       );\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'body' is not null or undefined\n       if (body === null || body === undefined) {\n         throw new RequiredError(\n           'body',\n           'Required parameter body was null or undefined when calling runContractFunction.',\n         );\n       }\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling runContractFunction.',\n         );\n       }\n       // verify required parameter 'functionName' is not null or undefined\n       if (functionName === null || functionName === undefined) {\n         throw new RequiredError(\n           'functionName',\n           'Required parameter functionName was null or undefined when calling runContractFunction.',\n         );\n       }\n       const localVarPath = `/{address}/function`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (functionName !== undefined) {\n         localVarQueryParameter['function_name'] = functionName;\n       }\n \n       localVarHeaderParameter['Content-Type'] = 'application/json';\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n       const needsSerialization =\n         <any>'any' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n       localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : body || '';\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * NativeApi - functional programming interface\n  * @export\n  */\n export const NativeApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(\n       blockNumberOrHash: string,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Block> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getBlock(\n         blockNumberOrHash,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LogEvent>> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getContractEvents(\n         address,\n         topic,\n         body,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(\n       transactionHash: string,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<BlockTransaction> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).getTransaction(\n         transactionHash,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n       const localVarFetchArgs = NativeApiFetchParamCreator(configuration).runContractFunction(\n         body,\n         address,\n         functionName,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * NativeApi - factory interface\n  * @export\n  */\n export const NativeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets the contents of a block by block hash\n      * @summary Gets block contents by block hash\n      * @param {string} blockNumberOrHash The block hash or block number\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n       return NativeApiFp(configuration).getBlock(blockNumberOrHash, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Gets events in descending order based on block number\n      * @summary Gets events by topic\n      * @param {string} address address\n      * @param {string} topic The topic of the event\n      * @param {any} [body] ABI of the specific event\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {number} [fromBlock] from_block\n      * @param {number} [toBlock] to_block\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractEvents(\n       address: string,\n       topic: string,\n       body?: any,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       fromBlock?: number,\n       toBlock?: number,\n       offset?: number,\n       limit?: number,\n       options?: any,\n     ) {\n       return NativeApiFp(configuration).getContractEvents(\n         address,\n         topic,\n         body,\n         chain,\n         subdomain,\n         providerUrl,\n         fromBlock,\n         toBlock,\n         offset,\n         limit,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the contents of a block transaction by hash\n      * @summary Gets block contents by block hash\n      * @param {string} transactionHash The transaction hash\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n       return NativeApiFp(configuration).getTransaction(transactionHash, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Runs a given function of a contract abi and returns readonly data\n      * @summary Runs a function of a contract abi\n      * @param {any} body Optional description in *Markdown*\n      * @param {string} address address\n      * @param {string} functionName function_name\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     runContractFunction(\n       body: any,\n       address: string,\n       functionName: string,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return NativeApiFp(configuration).runContractFunction(\n         body,\n         address,\n         functionName,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * NativeApi - object-oriented interface\n  * @export\n  * @class NativeApi\n  * @extends {BaseAPI}\n  */\n export class NativeApi extends BaseAPI {\n   /**\n    * Gets the contents of a block by block hash\n    * @summary Gets block contents by block hash\n    * @param {string} blockNumberOrHash The block hash or block number\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getBlock(blockNumberOrHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n     return NativeApiFp(this.configuration).getBlock(\n       blockNumberOrHash,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets events in descending order based on block number\n    * @summary Gets events by topic\n    * @param {string} address address\n    * @param {string} topic The topic of the event\n    * @param {any} [body] ABI of the specific event\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {number} [fromBlock] from_block\n    * @param {number} [toBlock] to_block\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getContractEvents(\n     address: string,\n     topic: string,\n     body?: any,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     fromBlock?: number,\n     toBlock?: number,\n     offset?: number,\n     limit?: number,\n     options?: any,\n   ) {\n     return NativeApiFp(this.configuration).getContractEvents(\n       address,\n       topic,\n       body,\n       chain,\n       subdomain,\n       providerUrl,\n       fromBlock,\n       toBlock,\n       offset,\n       limit,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the contents of a block transaction by hash\n    * @summary Gets block contents by block hash\n    * @param {string} transactionHash The transaction hash\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public getTransaction(transactionHash: string, chain?: ChainList, subdomain?: string, options?: any) {\n     return NativeApiFp(this.configuration).getTransaction(\n       transactionHash,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Runs a given function of a contract abi and returns readonly data\n    * @summary Runs a function of a contract abi\n    * @param {any} body Optional description in *Markdown*\n    * @param {string} address address\n    * @param {string} functionName function_name\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof NativeApi\n    */\n   public runContractFunction(\n     body: any,\n     address: string,\n     functionName: string,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return NativeApiFp(this.configuration).runContractFunction(\n       body,\n       address,\n       functionName,\n       chain,\n       subdomain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n /**\n  * ResolveApi - fetch parameter creator\n  * @export\n  */\n export const ResolveApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(domain: string, currency?: string, options: any = {}): FetchArgs {\n       // verify required parameter 'domain' is not null or undefined\n       if (domain === null || domain === undefined) {\n         throw new RequiredError(\n           'domain',\n           'Required parameter domain was null or undefined when calling resolveDomain.',\n         );\n       }\n       const localVarPath = `/resolve/{domain}`.replace(`{${'domain'}}`, encodeURIComponent(String(domain)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (currency !== undefined) {\n         localVarQueryParameter['currency'] = currency;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * ResolveApi - functional programming interface\n  * @export\n  */\n export const ResolveApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(\n       domain: string,\n       currency?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Resolve> {\n       const localVarFetchArgs = ResolveApiFetchParamCreator(configuration).resolveDomain(domain, currency, options);\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * ResolveApi - factory interface\n  * @export\n  */\n export const ResolveApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Resolves an Unstoppable domain and returns the address\n      * @summary Resolves an Unstoppable domain and returns the address\n      * @param {string} domain Domain to be resolved\n      * @param {string} [currency] The currency to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     resolveDomain(domain: string, currency?: string, options?: any) {\n       return ResolveApiFp(configuration).resolveDomain(domain, currency, options)(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * ResolveApi - object-oriented interface\n  * @export\n  * @class ResolveApi\n  * @extends {BaseAPI}\n  */\n export class ResolveApi extends BaseAPI {\n   /**\n    * Resolves an Unstoppable domain and returns the address\n    * @summary Resolves an Unstoppable domain and returns the address\n    * @param {string} domain Domain to be resolved\n    * @param {string} [currency] The currency to query\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof ResolveApi\n    */\n   public resolveDomain(domain: string, currency?: string, options?: any) {\n     return ResolveApiFp(this.configuration).resolveDomain(domain, currency, options)(this.fetch, this.basePath);\n   }\n }\n /**\n  * TokenApi - fetch parameter creator\n  * @export\n  */\n export const TokenApiFetchParamCreator = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getAllTokenIds.',\n         );\n       }\n       const localVarPath = `/nft/{address}`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getContractNFTTransfers.',\n         );\n       }\n       const localVarPath = `/nft/{address}/transfers`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(address: string, chain?: ChainList, options: any = {}): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTMetadata.',\n         );\n       }\n       const localVarPath = `/nft/{address}/metadata`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getNFTOwners.',\n         );\n       }\n       const localVarPath = `/nft/{address}/owners`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       // verify required parameter 'ownerAddress' is not null or undefined\n       if (ownerAddress === null || ownerAddress === undefined) {\n         throw new RequiredError(\n           'ownerAddress',\n           'Required parameter ownerAddress was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       // verify required parameter 'spenderAddress' is not null or undefined\n       if (spenderAddress === null || spenderAddress === undefined) {\n         throw new RequiredError(\n           'spenderAddress',\n           'Required parameter spenderAddress was null or undefined when calling getTokenAllowance.',\n         );\n       }\n       const localVarPath = `/erc20/{address}/allowance`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (ownerAddress !== undefined) {\n         localVarQueryParameter['owner_address'] = ownerAddress;\n       }\n \n       if (spenderAddress !== undefined) {\n         localVarQueryParameter['spender_address'] = spenderAddress;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenIdMetadata.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getTokenIdMetadata.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenIdOwners.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getTokenIdOwners.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}/owners`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'addresses' is not null or undefined\n       if (addresses === null || addresses === undefined) {\n         throw new RequiredError(\n           'addresses',\n           'Required parameter addresses was null or undefined when calling getTokenMetadata.',\n         );\n       }\n       const localVarPath = `/erc20/metadata`;\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (addresses) {\n         localVarQueryParameter['addresses'] = addresses;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(\n       symbols: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'symbols' is not null or undefined\n       if (symbols === null || symbols === undefined) {\n         throw new RequiredError(\n           'symbols',\n           'Required parameter symbols was null or undefined when calling getTokenMetadataBySymbol.',\n         );\n       }\n       const localVarPath = `/erc20/metadata/symbols`;\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (subdomain !== undefined) {\n         localVarQueryParameter['subdomain'] = subdomain;\n       }\n \n       if (symbols) {\n         localVarQueryParameter['symbols'] = symbols;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       exchange?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getTokenPrice.',\n         );\n       }\n       const localVarPath = `/erc20/{address}/price`.replace(`{${'address'}}`, encodeURIComponent(String(address)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (providerUrl !== undefined) {\n         localVarQueryParameter['providerUrl'] = providerUrl;\n       }\n \n       if (exchange !== undefined) {\n         localVarQueryParameter['exchange'] = exchange;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options: any = {},\n     ): FetchArgs {\n       // verify required parameter 'address' is not null or undefined\n       if (address === null || address === undefined) {\n         throw new RequiredError(\n           'address',\n           'Required parameter address was null or undefined when calling getWalletTokenIdTransfers.',\n         );\n       }\n       // verify required parameter 'tokenId' is not null or undefined\n       if (tokenId === null || tokenId === undefined) {\n         throw new RequiredError(\n           'tokenId',\n           'Required parameter tokenId was null or undefined when calling getWalletTokenIdTransfers.',\n         );\n       }\n       const localVarPath = `/nft/{address}/{token_id}/transfers`\n         .replace(`{${'address'}}`, encodeURIComponent(String(address)))\n         .replace(`{${'token_id'}}`, encodeURIComponent(String(tokenId)));\n       const localVarUrlObj = url.parse(localVarPath, true);\n       const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n       const localVarHeaderParameter = {} as any;\n       const localVarQueryParameter = {} as any;\n \n       // authentication ApiKeyAuth required\n       if (configuration && configuration.apiKey) {\n         const localVarApiKeyValue =\n           typeof configuration.apiKey === 'function' ? configuration.apiKey('X-API-Key') : configuration.apiKey;\n         localVarHeaderParameter['X-API-Key'] = localVarApiKeyValue;\n       }\n \n       if (chain !== undefined) {\n         localVarQueryParameter['chain'] = chain;\n       }\n \n       if (format !== undefined) {\n         localVarQueryParameter['format'] = format;\n       }\n \n       if (offset !== undefined) {\n         localVarQueryParameter['offset'] = offset;\n       }\n \n       if (limit !== undefined) {\n         localVarQueryParameter['limit'] = limit;\n       }\n \n       if (order !== undefined) {\n         localVarQueryParameter['order'] = order;\n       }\n \n       localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n       // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n       delete localVarUrlObj.search;\n       localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n \n       return {\n         url: url.format(localVarUrlObj),\n         options: localVarRequestOptions,\n       };\n     },\n   };\n };\n \n /**\n  * TokenApi - functional programming interface\n  * @export\n  */\n export const TokenApiFp = function (configuration?: Configuration) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getAllTokenIds(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getContractNFTTransfers(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(\n       address: string,\n       chain?: ChainList,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftContractMetadata> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getNFTMetadata(address, chain, options);\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getNFTOwners(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Erc20Allowance> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenAllowance(\n         address,\n         ownerAddress,\n         spenderAddress,\n         chain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Nft> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenIdMetadata(\n         address,\n         tokenId,\n         chain,\n         format,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenIdOwners(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Metadata>> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenMetadata(\n         addresses,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(\n       symbols: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Erc20Metadata>> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenMetadataBySymbol(\n         symbols,\n         chain,\n         subdomain,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(\n       address: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       exchange?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<Erc20Price> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getTokenPrice(\n         address,\n         chain,\n         providerUrl,\n         exchange,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ): (fetch?: FetchAPI, basePath?: string) => Promise<NftTransferCollection> {\n       const localVarFetchArgs = TokenApiFetchParamCreator(configuration).getWalletTokenIdTransfers(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       );\n       return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n         return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n           if (response.status >= 200 && response.status < 300) {\n             return response.json();\n           } else {\n             throw response;\n           }\n         });\n       };\n     },\n   };\n };\n \n /**\n  * TokenApi - factory interface\n  * @export\n  */\n export const TokenApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n   return {\n     /**\n      * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Retrieves the unique NFTs inside a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getAllTokenIds(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getAllTokenIds(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getContractNFTTransfers(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getContractNFTTransfers(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the global metadata for a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTMetadata(address: string, chain?: ChainList, options?: any) {\n       return TokenApiFp(configuration).getNFTMetadata(address, chain, options)(fetch, basePath);\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of the NFTs of a given contract\n      * @param {string} address Address of the contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getNFTOwners(\n       address: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getNFTOwners(\n         address,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets the amount which the spender is allowed to withdraw from the spender\n      * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n      * @param {string} address The address of the token contract\n      * @param {string} ownerAddress The address of the token owner\n      * @param {string} spenderAddress The address of the token spender\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenAllowance(\n       address: string,\n       ownerAddress: string,\n       spenderAddress: string,\n       chain?: ChainList,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenAllowance(\n         address,\n         ownerAddress,\n         spenderAddress,\n         chain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the NFT with the given id of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdMetadata(address: string, tokenId: string, chain?: ChainList, format?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenIdMetadata(address, tokenId, chain, format, options)(fetch, basePath);\n     },\n     /**\n      * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n      * @summary Gets the owners of NFTs for a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenIdOwners(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenIdOwners(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} addresses The addresses to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadata(\n       addresses: Array<string>,\n       chain?: ChainList,\n       subdomain?: string,\n       providerUrl?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getTokenMetadata(\n         addresses,\n         chain,\n         subdomain,\n         providerUrl,\n         options,\n       )(fetch, basePath);\n     },\n     /**\n      * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n      * @summary Gets token metadata\n      * @param {Array<string>} symbols The symbols to get metadata for\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenMetadataBySymbol(symbols: Array<string>, chain?: ChainList, subdomain?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenMetadataBySymbol(symbols, chain, subdomain, options)(fetch, basePath);\n     },\n     /**\n      * Returns the price nominated in the native token and usd for a given token contract address.\n      * @summary Gets token price\n      * @param {string} address The address of the token contract\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n      * @param {string} [exchange] The factory name or address of the token exchange\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getTokenPrice(address: string, chain?: ChainList, providerUrl?: string, exchange?: string, options?: any) {\n       return TokenApiFp(configuration).getTokenPrice(address, chain, providerUrl, exchange, options)(fetch, basePath);\n     },\n     /**\n      * Gets the transfers of the tokens matching the given parameters\n      * @summary Gets NFT transfers of a given contract\n      * @param {string} address Address of the contract\n      * @param {string} tokenId The id of the token\n      * @param {ChainList} [chain] The chain to query\n      * @param {string} [format] The format of the token id\n      * @param {number} [offset] offset\n      * @param {number} [limit] limit\n      * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n      * @param {*} [options] Override http request option.\n      * @throws {RequiredError}\n      */\n     getWalletTokenIdTransfers(\n       address: string,\n       tokenId: string,\n       chain?: ChainList,\n       format?: string,\n       offset?: number,\n       limit?: number,\n       order?: string,\n       options?: any,\n     ) {\n       return TokenApiFp(configuration).getWalletTokenIdTransfers(\n         address,\n         tokenId,\n         chain,\n         format,\n         offset,\n         limit,\n         order,\n         options,\n       )(fetch, basePath);\n     },\n   };\n };\n \n /**\n  * TokenApi - object-oriented interface\n  * @export\n  * @class TokenApi\n  * @extends {BaseAPI}\n  */\n export class TokenApi extends BaseAPI {\n   /**\n    * Gets data, including metadata (where available), for all token ids for the given contract address. * Results are sorted by the block the token id was minted (descending) and limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Retrieves the unique NFTs inside a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] If the order should be Ascending or Descending based on the blocknumber on which the NFT was minted. Allowed values: \\&quot;ASC\\&quot;, \\&quot;DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getAllTokenIds(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getAllTokenIds(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers of a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getContractNFTTransfers(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getContractNFTTransfers(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the contract level metadata (name, symbol, base token uri) for the given contract * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the global metadata for a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getNFTMetadata(address: string, chain?: ChainList, options?: any) {\n     return TokenApiFp(this.configuration).getNFTMetadata(address, chain, options)(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the owners of the NFTs of a given contract\n    * @param {string} address Address of the contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getNFTOwners(\n     address: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getNFTOwners(\n       address,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the amount which the spender is allowed to withdraw from the spender\n    * @summary Gets the amount which the spender is allowed to withdraw from the owner.\n    * @param {string} address The address of the token contract\n    * @param {string} ownerAddress The address of the token owner\n    * @param {string} spenderAddress The address of the token spender\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenAllowance(\n     address: string,\n     ownerAddress: string,\n     spenderAddress: string,\n     chain?: ChainList,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenAllowance(\n       address,\n       ownerAddress,\n       spenderAddress,\n       chain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets data, including metadata (where available), for the given token id of the given contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the NFT with the given id of a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenIdMetadata(address: string, tokenId: string, chain?: ChainList, format?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenIdMetadata(\n       address,\n       tokenId,\n       chain,\n       format,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets all owners of NFT items within a given contract collection * Use after /nft/contract/{token_address} to find out who owns each token id in a collection * Make sure to include a sort parm on a column like block_number_minted for consistent pagination results * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n    * @summary Gets the owners of NFTs for a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenIdOwners(\n     address: string,\n     tokenId: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenIdOwners(\n       address,\n       tokenId,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n    * @summary Gets token metadata\n    * @param {Array<string>} addresses The addresses to get metadata for\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenMetadata(\n     addresses: Array<string>,\n     chain?: ChainList,\n     subdomain?: string,\n     providerUrl?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getTokenMetadata(\n       addresses,\n       chain,\n       subdomain,\n       providerUrl,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns metadata (name, symbol, decimals, logo) for a given token contract address.\n    * @summary Gets token metadata\n    * @param {Array<string>} symbols The symbols to get metadata for\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [subdomain] The subdomain of the moralis server to use (Only use when selecting local devchain as chain)\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenMetadataBySymbol(symbols: Array<string>, chain?: ChainList, subdomain?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenMetadataBySymbol(\n       symbols,\n       chain,\n       subdomain,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Returns the price nominated in the native token and usd for a given token contract address.\n    * @summary Gets token price\n    * @param {string} address The address of the token contract\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [providerUrl] web3 provider url to user when using local dev chain\n    * @param {string} [exchange] The factory name or address of the token exchange\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getTokenPrice(address: string, chain?: ChainList, providerUrl?: string, exchange?: string, options?: any) {\n     return TokenApiFp(this.configuration).getTokenPrice(\n       address,\n       chain,\n       providerUrl,\n       exchange,\n       options,\n     )(this.fetch, this.basePath);\n   }\n \n   /**\n    * Gets the transfers of the tokens matching the given parameters\n    * @summary Gets NFT transfers of a given contract\n    * @param {string} address Address of the contract\n    * @param {string} tokenId The id of the token\n    * @param {ChainList} [chain] The chain to query\n    * @param {string} [format] The format of the token id\n    * @param {number} [offset] offset\n    * @param {number} [limit] limit\n    * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;block_number\\&quot;, \\&quot;block_number.ASC\\&quot;, \\&quot;block_number.DESC\\&quot;, Example 2: \\&quot;block_number and contract_type\\&quot;, \\&quot;block_number.ASC,contract_type.DESC\\&quot;\n    * @param {*} [options] Override http request option.\n    * @throws {RequiredError}\n    * @memberof TokenApi\n    */\n   public getWalletTokenIdTransfers(\n     address: string,\n     tokenId: string,\n     chain?: ChainList,\n     format?: string,\n     offset?: number,\n     limit?: number,\n     order?: string,\n     options?: any,\n   ) {\n     return TokenApiFp(this.configuration).getWalletTokenIdTransfers(\n       address,\n       tokenId,\n       chain,\n       format,\n       offset,\n       limit,\n       order,\n       options,\n     )(this.fetch, this.basePath);\n   }\n }\n ","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const MORALIS_APPLICATION_ID = process.env[\"MORALIS_APPLICATION_ID\"] || \"jlvmvCLbkVYZdgOMeKvYCuK8awZLCQARSLRsVb5o\";\nexport const MORALIS_API_KEY = process.env['MORALIS_API_KEY'] || 'V7ocf3uOf3lsa2i3uggAGTrDMjRUogCuzUA2AglySdA9qkO4mYAHxcPbh6NTCD59';","\nimport {\n  MORALIS_APPLICATION_ID,\n  MORALIS_API_KEY\n} from './constants'\n\nimport { Configuration } from './moralis/configuration';\nimport * as api from './moralis/api';\n\nconst config: Configuration = { apiKey: MORALIS_API_KEY, accessToken: MORALIS_APPLICATION_ID };\nconst instance: api.AccountApi = new api.AccountApi(config);\n\n/**\n  * Gets NFTs owned by the given address * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note results will include all indexed NFTs * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested\n  * @summary Gets the NFTs owned by a given address\n  * @param {string} address The owner of a given token\n  * @param {ChainList} [chain] The chain to query\n  * @param {string} [format] The format of the token id\n  * @param {string} [order] The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \\&quot;name\\&quot;, \\&quot;name.ASC\\&quot;, \\&quot;name.DESC\\&quot;, Example 2: \\&quot;Name and Symbol\\&quot;, \\&quot;name.ASC,symbol.DESC\\&quot;\n  * @param {*} [options] Override http request option.\n  * @throws {RequiredError}\n  * @memberof AccountApi\n*/\nconst getAllNFTs = async (\n  address: string,\n  chain?: api.ChainList,\n  format?: string,\n  order?: string\n): Promise<Array<api.NftOwner>> => {\n  \n  console.log(\"what is the issue\")\n  const offset = 0;\n  const pageSize = 50;\n\n  const result: Array<api.NftOwner> = [];\n  try{\n    const res = await instance.getNFTs(address, chain, format, offset, pageSize);\n    console.log(res)\n  } catch(err) {\n    console.error(\"error occured while fetching user nfts\");\n    throw(err);\n  }\n  return result;\n}\n\nconst runProcess = async () => {\n  console.log(\"woww\");\n  const res = await getAllNFTs(\"0x9B6134Fe036F1C22D9Fe76c15AC81B7bC31212eB\", api.ChainList.Rinkeby);\n  console.log(res);\n}\n\nconst runApp = async () => {\n  await runProcess();\n}\n\nrunApp();"],"names":["ChainList","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","MORALIS_APPLICATION_ID","process","env","MORALIS_API_KEY","BASE_PATH","replace","BaseAPI","configuration","basePath","fetch","isomorphicFetch","RequiredError","field","msg","AccountApiFetchParamCreator","getHistoricalNFTTransfers","address","chain","subdomain","providerUrl","fromBlock","toBlock","offset","limit","options","localVarPath","encodeURIComponent","String","localVarUrlObj","url","localVarRequestOptions","assign","localVarHeaderParameter","localVarQueryParameter","apiKey","localVarApiKeyValue","query","search","headers","getNFTTransfers","format","direction","order","getNFTs","getNFTsForContract","tokenAddress","getNativeBalance","getTokenBalances","getTokenTransfers","getTransactions","AccountApiFp","localVarFetchArgs","response","status","json","instance","accessToken","getAllNFTs","console","log","runProcess","api","Rinkeby","runApp"],"mappings":"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"}